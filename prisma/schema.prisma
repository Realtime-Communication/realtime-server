datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id            String    @id @default(uuid()) @db.Uuid
  phone         String    @unique
  email         String    @unique
  password      String
  first_name    String    @default("")
  middle_name   String?   @default("")
  last_name     String    @default("")
  is_active     Boolean   @default(false)
  is_reported   Boolean   @default(false)
  is_blocked    Boolean   @default(false)
  preferences   String?   @default("")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  Devices       Devices[]
  Messages      Messages[]
  Participants  Participants[]
  Reports       Reports[]
  DeletedMessages DeletedMessages[]
  DeletedConversations DeletedConversations[]
  Access        Access[]
  UserContacts  UserContacts[] @relation("UserContacts")
  Contacts      UserContacts[] @relation("ContactRelation")
  BlockList     BlockList[]
  UserVerification UserVerification?
}

model Devices {
  id           String    @id @default(uuid()) @db.Uuid
  users_id     String    @db.Uuid
  device_id    String
  device_token String
  type         DeviceType
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  Users        Users     @relation(fields: [users_id], references: [id])
  Access       Access[]
}

model Access {
  id         String    @id @default(uuid()) @db.Uuid
  users_id   String    @db.Uuid
  devices_id String    @db.Uuid
  token      String
  created_at DateTime  @default(now())
  deleted_at DateTime?

  Users      Users     @relation(fields: [users_id], references: [id])
  Devices    Devices   @relation(fields: [devices_id], references: [id])
}

model UserVerification {
  users_id         String   @id @db.Uuid
  verification_code String
  created_at       DateTime

  Users            Users    @relation(fields: [users_id], references: [id])
}

model UserContacts {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  contact_id String    @db.Uuid
  first_name String    @default("")
  last_name  String    @default("")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  Users      Users     @relation("UserContacts", fields: [user_id], references: [id])
  Contact    Users     @relation("ContactRelation", fields: [contact_id], references: [id])

  @@unique([user_id, contact_id])
}

model Contacts {
  id          String    @id @default(uuid()) @db.Uuid
  first_name  String    @default("")
  middle_name String?   @default("")
  last_name   String    @default("")
  phone       String
  email       String
  created_at  DateTime  @default(now())
}

model BlockList {
  id              String    @id @default(uuid()) @db.Uuid
  users_id        String    @db.Uuid
  participants_id String    @db.Uuid
  created_at      DateTime  @default(now())

  Users          Users     @relation(fields: [users_id], references: [id])
}

model Conversation {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  creator_id  String    @db.Uuid
  channel_id  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  Messages             Messages[]
  Participants        Participants[]
  DeletedConversations DeletedConversations[]
}

model Participants {
  id             String    @id @default(uuid()) @db.Uuid
  conversation_id String    @db.Uuid
  users_id       String    @db.Uuid
  type           ParticipantType
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  Users          Users    @relation(fields: [users_id], references: [id])
  Conversation   Conversation @relation(fields: [conversation_id], references: [id])

  @@unique([conversation_id, users_id])
}

model Messages {
  id             String    @id @default(uuid()) @db.Uuid
  guid           String
  conversation_id String    @db.Uuid
  sender_id      String    @db.Uuid
  message_type   MessageType
  message        String    @default("")
  created_at     DateTime  @default(now())
  deleted_at     DateTime?

  Conversation   Conversation @relation(fields: [conversation_id], references: [id])
  Users          Users    @relation(fields: [sender_id], references: [id])
  Attachments    Attachments[]
  DeletedMessages DeletedMessages[]
}

model Attachments {
  id          String    @id @default(uuid()) @db.Uuid
  messages_id String    @db.Uuid
  thumb_url   String
  file_url    String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  Messages    Messages  @relation(fields: [messages_id], references: [id])
}

model DeletedMessages {
  id          String    @id @default(uuid()) @db.Uuid
  messages_id String    @db.Uuid
  users_id    String    @db.Uuid
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  Messages    Messages  @relation(fields: [messages_id], references: [id])
  Users       Users    @relation(fields: [users_id], references: [id])
}

model DeletedConversations {
  id             String    @id @default(uuid()) @db.Uuid
  conversation_id String    @db.Uuid
  users_id       String    @db.Uuid
  created_at     DateTime  @default(now())

  Conversation   Conversation @relation(fields: [conversation_id], references: [id])
  Users          Users    @relation(fields: [users_id], references: [id])
}

model Reports {
  id              String    @id @default(uuid()) @db.Uuid
  users_id        String    @db.Uuid
  participants_id String    @db.Uuid
  report_type     String
  notes           String?
  status          ReportStatus @default(PENDING)
  created_at      DateTime  @default(now())

  Users          Users     @relation(fields: [users_id], references: [id])
}

model Activities {
  id            String    @id @default(uuid()) @db.Uuid
  activity_type String
  activity_id   String    @db.Uuid
  title         String
  detail        String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

enum MessageType {
  text
  image
  vedio
  audio
}

enum ParticipantType {
  single
  group
}

enum DeviceType {
  APPLE
}

enum ReportStatus {
  PENDING
  RESOLVED
}
