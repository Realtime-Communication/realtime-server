generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = "postgresql://admin:adminpassword@postgres:5432/main_db"
  relationMode = "foreignKeys"
} 

model User {
  id          Int         @id @default(autoincrement())
  phone       String      @unique
  email       String      @unique
  password    String
  role        AccountRole
  is_blocked  Boolean     @default(false)
  is_active   Boolean     @default(true)

  // Personal information
  first_name  String      @default("")
  middle_name String?
  last_name   String      @default("")
  preferences String?

  // Admin information
  level_left  Int? // Only for admin users
  level_right Int? // Only for admin users
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relations
  accesses                 Access[]
  verification             UserVerification?
  blocked_users            BlockList[]           @relation("UserBlocks")
  blocked_by_users         BlockList[]           @relation("UserBlockedBy")
  participants             Participant[]
  sent_messages            Message[]
  deleted_messages         DeletedMessage[]
  deleted_conversations    DeletedConversation[]
  reports_made             Report[]              @relation("UserReports")
  reports_received         Report[]              @relation("UserReported")
  friend_requests_sent     Friend[]              @relation("FriendRequester")
  friend_requests_received Friend[]              @relation("FriendReceiver")
  stories                  Story[]
  story_likes              StoryLike[]
  story_comments           StoryComment[]
  created_conversations    Conversation[]
}

model Device {
  id           Int        @id @default(autoincrement())
  device_code  String
  device_token String
  type         DeviceType
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  // Relations
  accesses Access[]
}

model Access {
  id         Int       @id @default(autoincrement())
  user_id    Int
  device_id  Int
  token      String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  device Device @relation(fields: [device_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model UserVerification {
  user_id           Int              @id @default(autoincrement())
  verification_code String
  created_at        DateTime
  expired_at        DateTime
  type              VerificationType

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model BlockList {
  id             Int      @id @default(autoincrement())
  user_id        Int
  participant_id Int
  created_at     DateTime @default(now())

  // Relations
  user        User @relation("UserBlocks", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  participant User @relation("UserBlockedBy", fields: [participant_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Conversation {
  id         Int       @id @default(autoincrement())
  title      String
  creator_id Int
  channel_id Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  avatar_url String

  // Relations
  creator               User                  @relation(fields: [creator_id], references: [id])
  participants          Participant[]
  messages              Message[]
  deleted_conversations DeletedConversation[]
}

model Participant {
  id              Int               @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  type            ParticipantType
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  status          ParticipantStatus @default(UNVERIFIED)
  verified_by     Int?              @default(autoincrement())

  // Relations
  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([conversation_id, user_id])
}

model Message {
  id              Int           @id @default(autoincrement())
  guid            String
  conversation_id Int
  sender_id       Int
  message_type    MessageType
  content         String        @default("")
  created_at      DateTime      @default(now())
  deleted_at      DateTime?
  call_type       CallType
  call_status     CallStatus
  message_status  MessageStatus

  // Relations
  conversation     Conversation     @relation(fields: [conversation_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sender           User             @relation(fields: [sender_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  attachments      Attachment[]
  deleted_messages DeletedMessage[]
}

model Attachment {
  id         Int      @id @default(autoincrement())
  message_id Int
  thumb_url  String
  file_url   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  message Message @relation(fields: [message_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model DeletedMessage {
  id         Int      @id @default(autoincrement())
  message_id Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  message Message @relation(fields: [message_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model DeletedConversation {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  created_at      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Report {
  id              Int          @id @default(autoincrement())
  user_id         Int
  participant_id  Int
  report_type     String
  notes           String?
  status          ReportStatus @default(PENDING)
  created_at      DateTime     @default(now())
  rejected_reason String?

  // Relations
  user        User @relation("UserReports", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  participant User @relation("UserReported", fields: [participant_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Friend {
  id           Int          @id @default(autoincrement())
  requester_id Int
  receiver_id  Int
  status       FriendStatus
  created_at   DateTime     @default(now())

  // Relations
  requester User @relation("FriendRequester", fields: [requester_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  receiver  User @relation("FriendReceiver", fields: [receiver_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([requester_id, receiver_id])
}

model Story {
  id         Int      @id @default(autoincrement())
  user_id    Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime

  // Relations
  user     User           @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  likes    StoryLike[]
  comments StoryComment[]
}

model StoryLike {
  id         Int      @id @default(autoincrement())
  story_id   Int
  user_id    Int
  created_at DateTime @default(now())

  // Relations
  story Story @relation(fields: [story_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([story_id, user_id])
}

model StoryComment {
  id         Int      @id @default(autoincrement())
  story_id   Int
  user_id    Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  story Story @relation(fields: [story_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum AccountRole {
  USER
  ADMIN
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
  CALL
}

enum VerificationType {
  AUTHENTICATION
  CHANGE_PASSWORD
}

enum CallStatus {
  INVITED
  MISSED
  ONGOING
  ENDED
}

enum CallType {
  VOICE
  VIDEO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum ParticipantType {
  LEAD
  MEMBER
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum ParticipantStatus {
  VERIFIED
  UNVERIFIED
  REJECTED
}
