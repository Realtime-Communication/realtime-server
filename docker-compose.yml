# ==============================================================================
# NestJS Realtime Server - Docker Compose Configuration
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # NestJS Backend Service
  # ==============================================================================
  
  nestjs-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-realtime-server
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_ACCESS_TOKEN=${JWT_ACCESS_TOKEN}
      - JWT_ACCESS_EXPIRED=${JWT_ACCESS_EXPIRED:-7d}
      - PRISMA_CLIENT_ENGINE_TYPE=binary
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - nestjs-network
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==============================================================================
  # PostgreSQL Database
  # ==============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: nestjs-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-nestjs_chat_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-nestjs_chat_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # Redis Cache
  # ==============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # RabbitMQ Message Queue
  # ==============================================================================
  
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: nestjs-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-defaultpassword}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

# ==============================================================================
# Networks
# ==============================================================================

networks:
  nestjs-network:
    driver: bridge
    name: nestjs-realtime-network

# ==============================================================================
# Volumes
# ==============================================================================

volumes:
  postgres-data:
    driver: local
    name: nestjs-postgres-data
  redis-data:
    driver: local
    name: nestjs-redis-data
  rabbitmq-data:
    driver: local
    name: nestjs-rabbitmq-data
  app-logs:
    driver: local
    name: nestjs-app-logs
  app-uploads:
    driver: local
    name: nestjs-app-uploads 
